{% import "header.jinja" as header %}
{% import "head.jinja" as head %}
<!DOCTYPE html>
<html lang="en">

{{ head.render_head( 'Torrents for ' + id) }}

<body class="bg-secondary d-flex flex-column vh-100">
	{{ header.render_header(False, url_for('anime_info', id=id) ) }}
	<div class="d-flex flex-grow-1">
		<div class="container text-center">
			<table class="table table-striped table-hover">
				<thead id="torrent_list_head">
					<tr>
						<th class="col-10 mt-3 mb-2" onclick="sortTable(0)">Title<i class="bi bi-caret-right-fill"></i>
						</th>
						<th class="col-1 mt-3 mb-2" onclick="sortTable(1)">Seeds<i class="bi bi-caret-down-fill"></i>
						</th>
						<th class="col-1 mt-3 mb-2" onclick="sortTable(2)">Leechs<i class="bi bi-caret-right-fill"></i>
						</th>
					</tr>
				</thead>
				<tbody id="torrent_list"></tbody>
			</table>
			<template id="torrentTemplate">
				{# <button class="btn btn-secondary border border-dark mb-1" onclick="download(event)"> #}
					<tr class="row_root text-success" onclick="download(event)">
						{# <div class="row border-5 rounded-1"> #}
							<td class="col-10 torrent_title">-</td>
							<td class="col-1 torrent_seeds">-</td>
							<td class="col-1 torrent_leechs">-</td>
							{#
						</div> #}
					</tr>
					{#
				</button> #}
			</template>
		</div>
	</div>

	<script>

		var sortIndex = 1;
		var sortDir = 'desc';

		function compare(a, b, order) {
			var out;
			if (/^[+-]?\d+$/.test(a) && /^[+-]?\d+$/.test(a)) {
				out = parseInt(a) <= parseInt(b);
			} else {
				out = a.toLowerCase() <= b.toLowerCase();
			}
			return order ? out : !out
		}

		function setSortOrderGUI(n, dir) {
			sortIndex = n;
			sortDir = dir;
			const headers = document.getElementById('torrent_list_head').querySelectorAll('.bi');
			for (var i = 0; i < headers.length; i++) {
				headers[i].classList.remove('bi-caret-right-fill', 'bi-caret-up-fill', 'bi-caret-down-fill');
				if (i == n) {
					if (dir == "asc") {
						headers[i].classList.add('bi-caret-up-fill');
					} else {
						headers[i].classList.add('bi-caret-down-fill');
					}
				} else {
					headers[i].classList.add('bi-caret-right-fill');
				}
			}
		}

		function sortTable(n) {
			// From: https://www.w3schools.com/howto/howto_js_sort_table.asp
			var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
			table = document.getElementById("torrent_list");
			switching = true;
			// Set the sorting direction to ascending:
			dir = "asc";
			setSortOrderGUI(n, dir);
			/* Make a loop that will continue until
			no switching has been done: */
			while (switching) {
				// Start by saying: no switching is done:
				switching = false;
				rows = table.rows;
				/* Loop through all table rows */
				for (i = 0; i < (rows.length - 1); i++) {
					// Start by saying there should be no switching:
					shouldSwitch = false;
					/* Get the two elements you want to compare,
					one from current row and one from the next: */
					x = rows[i].getElementsByTagName("TD")[n];
					y = rows[i + 1].getElementsByTagName("TD")[n];
					/* Check if the two rows should switch place,
					based on the direction, asc or desc: */
					if (x.innerHTML != y.innerHTML && !compare(x.innerHTML, y.innerHTML, dir == "asc")) {
						shouldSwitch = true;
						break;
					}
				}
				if (shouldSwitch) {
					/* If a switch has been marked, make the switch
					and mark that a switch has been done: */
					rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
					switching = true;
					// Each time a switch is done, increase this count by 1:
					switchcount++;
				} else {
					/* If no switching has been done AND the direction is "asc",
					set the direction to "desc" and run the while loop again. */
					if (switchcount == 0 && dir == "asc") {
						dir = "desc";
						setSortOrderGUI(n, dir);
						switching = true;
					}
				}
			}
		}

		function updateList() {
			url = '/torrents_search?search_id={{ search_id }}';
			const keys = ['name', 'seeds', 'leech']
			const intervalId = setInterval(async () => {
				fetch(url)
					.then(response => response.json())
					.then(data => {
						let root = document.getElementById('torrent_list');
						data.data.forEach(torrent => {
							let line = document.getElementById('torrentTemplate').content.cloneNode(true);
							line.querySelector('.torrent_title').textContent = torrent.name;
							line.querySelector('.torrent_seeds').textContent = torrent.seeds;
							line.querySelector('.torrent_leechs').textContent = torrent.leech;
							let tr = line.querySelector('.row_root');
							tr.dataset.magnet = torrent.link;

							// Sorted insert

							const rows = Array.from(root.rows);

							let insertIndex = rows.findIndex(row => {
								const cellValue = row.querySelectorAll('td')[sortIndex].textContent;
								return compare(torrent[keys[sortIndex]], cellValue, sortDir == "asc")
							});

							if (insertIndex === -1) {
								insertIndex = rows.length; // If no appropriate position is found, insert at the end
							}
							// Insert the new row into the table at the determined position
							root.insertBefore(line, rows[insertIndex]);
						})
						if (data.empty === true) {
							clearInterval(intervalId);
						}
					})
			},
				1000
			)
		}

		updateList();

		const anime_id = {{ id }};

		function download(event) {
			console.log(event);
			const clicked = event.target;
			const btn = clicked.closest('.row_root');
			const magnet = btn.dataset.magnet;
			let urlParams = new URLSearchParams();
			urlParams.append('magnet', magnet);
			fetch('/download/' + anime_id + '?' + urlParams.toString())
				.then((data) => data.json())
				.then((data) => {
					btn.classList.remove(['table-secondary', 'table-danger']);
					if (data['success'] === true) {
						btn.classList.add('table-success');
					} else {
						btn.classList.add('table-danger');
					}
				})
		}
	</script>
{{ head.render_footer() }}
</body>

</html>